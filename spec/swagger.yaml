swagger: '2.0'
info:
  title: Site provider api
  description: |
    ![Logo](https://scdn.ntgm.rocks/image/OTH/200/auto/igp-logo-dark.png)
    
    
    Version 2.4.X Of the Site Provider adds validation endpoints, data endpoints for pulling countries, and currencies, as well as refactoring
    of the game library to include multimedia endpoints.
    
    ### PlayerSchemas
    
    Robust, fully dynamic datamodel and FormView templates for registration data, including extendable validator
    logic.
    
    For each portal, there can be multiple playerSchemas, although it is envisioned that all sites will have three:
    
    - registrationFull
    - registrationShortapi
    - playerProfile
    
    The schemas return datamodel and formview data for dynamic rendering of all forms, and include additional data
    such as:
    
    - HTML5 Hint: the suggested HTML5 control to use with the each field.
    - FieldType: A logical field type, based on the DK formbuilder for handeling of specific types of fields, such as:
      - TAC
      - Country picker
      - Color chooser
      - Link

    As well as other standard field types like date, datetime, etc.  
    
    Field definitions provide information such as required status, JSON dataType, grouping information, and field order.
    
    For select/multiselect/radio fields values valueLists, and default values are provided. These values are provided
    only as "slugs" for the value portion of the controls, leaving localization up to the consumer. 
    
    
    *This should be evaluated in next versions to see if this is the best way to handle localization*
  
    #### Validation
    
    Validation is excuted on submitted registration schemas upon submission. You can also test validate a player registration by posting to the `/player/schemas/{ShemaCode}` endpoint.
    
    
    
    ##### Field Validation
    Field validation logic is handled by returning an array of validators for each field. This will allow
    consumers, if they wish, to implement the same JavaScript validators that are used on the back end. 
    If not desired, validators return slugs of their names for localization. A validator description is
    also provided for developer use.
    
    Individual values can be validated against any available validatory by using the `/validate/{validatorKey}/{value}` endpoint. The HEAD method can be used to optimize speed and minumize network traffic.
    
    
    #### AutoLogin
    
    The autologin option and functionality is added, if requested, and enabled on the backend, a valid session ID for the new user will be generated and returned in headers when a new player is registered.
    
    #### Player/Instant
    This endpoint is provided to allow you to create a "pre-player" or user account on the backend, which will be flagged as incomplete, and can be followed up
    by email in case the player abandonds the rest of the registration procedure. 
    
    This endpoint is provided as a utility to allow you to create multi-step sign up procedures.
    
    ** Players that have only signed up with the instant endpoint will not be able to deposit or spin for money game mode. **
    
    #### PlayerFavorites
    The platform provides storage for player an unlimited number of player favorites.
    YOu can add a favorite list, a single favorite entry, update a single entry, or remove entries directly. 
    
    PlayerFavorites have a "slot" integer which can either be used as a priority setting, or simply a ordering function. Multiple favorites can share a "slot", so you can also use this for grouping favorites.
    
    #### PlayerRatings
    The platform also provides an interface for storing, deleting and retrieving player game reviews. 
    
    #### PlayerLatests
    As part of TotalTelemetry the system provides endpoints to retrive a players latest game launches.
    
    #### General result codes (resultCode):

      * success - operation completed successfuly
      * unauthorized - unauthorized request
      * session_expired - player session expired
      * ESOCKETTIMEDOUT - request timeout
      * anonsession_missing_or_expired - anonymous session missing or expired (required for non-protected endpoints)

    #### Other request specific result codes (resultCode):

      * invalid_input - invalid input
      * invalid_username_or_password - invalid username or password
      * invalid_version - updating invalid version
      * invalid_old_password - invalid old password
      * invalid_new_password - invalid_new_password
      * page_not_found - page do not exists
      * game_not_found - game do not exists
      * missing_email - missing email
      * missing_input - missing input
      * missing_version - missing version
      * missing_username - missing username
      * missing_password - missing password
      * old_password_missing - old password is missing
      * new_password_missing - new password is missing
      * payment_processor_error - payment processor error
      * payment_processor_invalid_parameters - invalid input parameters
      * account_blocked - player account is blocked, usually by too many fail login attempts (contact administrator for unblock)
      * account_deactivated - player account was deactivated by their request
      * account_frozen - player account is temporary frozen
      * account_pending - player activation not complete
      * account_unactivated - player account is not activated
      * termsofuse_changed - player needs to accept new terms of use
      * token_expired - token expired
      * game_not_available

  version: "2.4.11"
tags:
  - name: Player
    description: |
      Player related endpoints. Endpoints for registering new players, getting player information, as well
      as retriving the datamodeles/ schemas for the sites player data.
  - name: Game Library
    description: Game Library and Game Related Enpoints
  - name: Auth
    description: Authorization and password related endpoints
  - name : Cashier
    description: Cashier Related endpoints
  - name: Registration
    description: Registration related endpoints.
  - name: Protected
    description: Endpoints which require a valid session.
  - name: Reviews
    description: Endpoints for creating and reading player game reviews.
  - name: Validation
    description: Endpoints for validating data
  - name: Deprecated
    description: Endpoints that have been put out of production, will not be implemented
  - name: Terms of Use
    description : Endpoints related to Terms of Use.
  - name: Unimplemented
    description : Endpoints planned to be implemented in the near future
  - name: Session
    description : Endpoints related to Session
  - name: Bonus
    description : Endpoints related to Bonuses
  - name: Lists
    description: Various lists and reports
  - name: Freerounds
    description: Freerounds award program
  - name: Auth hub
    description: Endpoints related to Auth hub 
  - name: Cache
    description: Endpoints for managing the cache
host: demo-api.igp.cloud
schemes:
  - https
basePath: /api
produces:
  - application/json
paths:
  /games:
    head:
      tags:
        - Game Library
      summary: Get the count of games available on site.
      responses:
        '200':
          description: Response headers
          headers:
            "x-game-count":
              type: integer
              description: Count of games for site.
        401:
          description: Invalid session
          headers:
            "x-error-code":
              type: string
              description: error code
    get:
      tags:
        - Game Library
      summary: Get games list
      parameters:
        - $ref: "#/parameters/AnonSession"
      responses:
        '200':
          description: Response object
          headers:
            "x-game-count":
              type: integer
              description: Count of games for site.
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                type: array
                items:
                  $ref: '#/definitions/Game'
  /games/{id}:
    get:
      tags:
        - Game Library
      summary: Get a single game
      parameters:
        - $ref: "#/parameters/AnonSession"
        - name: id
          in: path
          required: true
          type: string
          description: Game id
      responses:
        '200':
          description: Game
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                $ref: '#/definitions/Game'
        '400':
          $ref: '#/responses/Info'
  /player/schemas:
    get:
      tags:
        - Player
        - Registration
      description: | 
         Returns full definition of the player schemas available for the portal. 
        
          Usually portals have 3 schemas:
        
          * registrationFull
          * registrationQuick 
          * PlayerProfile.
      summary: Retrieve all player schemas for site.
      parameters:
        - $ref: "#/parameters/AnonSession"
      responses:
        '200':
          description: Response object
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/PagedInfo"
              data:
                type: array
                description: An array of player schemas
                items:
                  $ref : "#/definitions/PlayerSchema"
  /player/schemas/{SchemaCode}:
    get:
      tags:
        - Player
        - Registration
      summary: Retrieve a single PlayerProfile by code
      parameters:
        - $ref: "#/parameters/AnonSession"
        - $ref: "#/parameters/SchemaCode"
      responses:
        '200':
          description: Response object
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                $ref: "#/definitions/PlayerSchema"
    post:
      tags:
        - Player
      summary: Check the registration data for a new player without creating it.
      description: >
        Validates player schema data.  Same as `/player/ [POST]`, but does not actually create the player, just returns if data is schema valid.
          See `/player [post] for more information.`
          
          Is an alias for `/validate/player [POST]`
        
      parameters:
        - $ref: "#/parameters/AnonSession"
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/PlayerRegistration'
        - $ref: "#/parameters/SchemaCode"
      responses:
        '201':
          description: Valid input, player created/registered.
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                type: object
                properties:
                  valid:
                    type: boolean
        '400' :
          $ref: "#/responses/InvalidPlayerdata"
  /captcha:
    get:
      summary: Get captcha image
      tags:
        - Player
      description: Registration captcha
      parameters:
        - $ref: "#/parameters/AnonSession"
        - name: width
          in: query
          type: number
          required: false
          description: image width (default 90px) 
        - name: height
          in: query
          type: number
          required: false
          description: image width (default 30px) 
        - name: background
          in: query
          type: string
          required: false
          description: background color (default ffffff - white)
      responses:
        200:
          description: Captcha image
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                type: object
                properties:
                  imgSrc:
                    type: string
                    description: base64 encoded captcha image you can put into <img src=""/>

  /player:
    head:
      tags:
        - Player
        - Protected
      summary: Check to see if the player session is valid
      description: >
        Returns a valid header if the session which was passed is still active/valid.
      parameters:
        - $ref: "#/parameters/Session"
      responses:
        '200':
          description: Session is Valid
        '401':
          description: Invalid session
          headers:
            "x-error-code":
              type: string
              description: error code

    get:
      tags:
        - Player
        - Protected
      summary: Retrieve a player's profile (flat)
      description: >
        Retrieves core player information based on the players session.
      parameters:
        - $ref: "#/parameters/Session"
      responses:
        '200':
          description: Valid input
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                $ref: '#/definitions/Player'
        404:
          $ref: "#/responses/Info"
    patch:
      tags:
        - Player
      summary: Update players data with simplified schema.
      description: >
       Simplyfied endpoint for updating core player data. For custom and full fields use the /player/full endpoints. 
       
       Possible error codes (resultCode): invalid_input
      parameters:
        - $ref: "#/parameters/Session"
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CorePlayerUpdate'
      responses:
        '201':
          description: Valid input - Player updated
          schema:
            type: object
            properties:
              info:
                type: number
              data:
                type: object
                properties:
                  valid:
                    type: boolean
        '400' :
          $ref: "#/responses/InvalidPlayerdata"
    
    post:
      tags:
        - Player
      summary: Create (register) a simple player
      description: >
        A simplyfied endpoint for registering a player using limited, predifined 
        fields.
        
        **This method provides a simple registration which give you a shortcut to the most basic required fields to create a player. Under most jurisdictions, the player will not be able to deposit, withdraw or play until the required player data has been submitted via the `POST` method.**
        
        sessionid in response (in data and in header) is only returned if autologin is requested, and allowed.
        
        **If you wish to use extended/customized fields, use the `POST` method.**

        Possible error codes (resultCode): invalid_input

      parameters:
        - $ref: "#/parameters/AnonSession"
        - name: autologin
          in: query
          description: > 
            Requesting autologin of the player if registration succeeds. If the option is enabled in the site setup, and requested, a valid session id will be returned.
          required: false
          default: false
          type: boolean
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CorePlayerInput'
      responses:
        '201':
          description: Valid input - Player Created
          headers:
            'x-sessionid':
              type: string
              description: If autologin option was requested, and autologin is enabled for the site, the player's valid `sessionid`.
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                allOf:
                  - properties:
                      sessionId:
                        type: string
                        description: Will be returned only in case if portal supports autologin and if `autologin` param was set to `true` 
                  - $ref: '#/definitions/Player'
        '400' :
          $ref: "#/responses/InvalidPlayerdata"
  /player/extended:
    get:
      tags:
        - Player
      summary: Retrieve a player's full profile. 
      description: >
        Retrieves all player data, including all custom fields, in the form of fieldInstances.
      parameters:
        - $ref: "#/parameters/Session"
      responses:
        '200':
          description: Valid input
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                $ref: '#/definitions/PlayerData'
        404:
          $ref: "#/responses/Info"
    post:
      tags:
        - Player
      summary: Create (register) a new player by posting a player schema.
      description: >
        The fully featured player register endpoint. This endpoint accepts an array of `fieldInstance`s

          **The schema code for the desired PlayerSchema must be provided.**
          
          The sent data will then be validated against the selected schema as well as all core data rules. Upon validation error the response object will contain a list of invalid fields as well as which validation rule or rules were triggered, in order of triggering.
          
          Possible error codes (resultCode): invalid_input
      parameters:
        - $ref: "#/parameters/AnonSession"
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/PlayerRegistration'
        - name: autologin
          in: query
          type: boolean
          description: > 
            Requesting autologin of the player if registration succeeds. If the option is enabled in the site setup, and requested, a valid session id will be returned.
      responses:
        '201':
          description: Valid input, player created/registered.
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                allOf:
                  - description: >
                      Object for submitting updates to player profile data. Similar to PlayerRegistration, but it is hardcoded to the PlayerProfile schema.
                    properties:
                      sessionid: 
                        type: string
                        description: >
                          Will be returned only in case if portal supports autologin and if `autologin` param was set to `true` 
                  - $ref: '#/definitions/PlayerData'
        '400' :
          $ref: "#/responses/InvalidPlayerdata"

    patch:
      tags:
        - Player
        - Protected
      summary: Update a player profile
      description: >
        Updates (patches) a the profile data for the current session. Only the data
        which needs to be updated should be submitted.
        
        Data is submitted using `fieldInstances` in  a similar manner to `[POST] /player/full` with arrays of `fieldInstances[Str|Num|Arr|Obj]` in the appropriate property.
        
        Possible error codes (resultCode): invalid_input
      parameters:
        - $ref: "#/parameters/Session"
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/PlayerData'
        - name: schemaCode
          in: query
          type: string
          description: >
            Schema which will be used for updating player. If not defined, system will fallback to `playerProfile` schema,
              which is default when updating player data from portal.

      responses:
        '200':
          description: Valid input
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                $ref: '#/definitions/PlayerData'
        '404':
          $ref: "#/responses/Info"
        '400' :
          $ref: "#/responses/InvalidPlayerdata"

  /player/instant:
    post:
      tags:
        - Player
        - Unimplemented
      summary: Create the most simple version of a player, will not be able to deposit or spin until additional data is provided.
      description: >
        This allows you to create a "user" which can later be turned into a player by providing additional data. 
        
        ** Upon creation, this player will not be able to deposit or spin, until additional data is provided.**
        
        This endpoint is envisioned to be used when you want to instantly register a player in a multistep process, and persist their basic data to 
        the backend to allow automated cart-ababandon type scenarios.
        
      parameters:
        - $ref: "#/parameters/AnonSession"
        - name: autologin
          in: query
          description: > 
            Requesting autologin of the player if registration succeeds. If the option is enabled in the site setup, and requested, a valid session id will be returned.
          required: false
          default: false
          type: boolean
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/InstantPlayerInput'
      responses:
        '201':
          description: Valid input - Player Created
          headers:
            'x-sessionid':
              type: string
              description: If autologin option was requested, and autologin is enabled for the site, the player's valid `sessionid`.
          schema:
            type: object
            properties:
              info:
                type: number
              data:
                type: object
                properties:
                  valid:
                    type: boolean
        '400' :
          $ref: "#/responses/InvalidPlayerdata"
  /anon:
    get:
      tags:
        - Session
      summary: Get/start anonymous session
      description: >
        Required for captcha validation/registration process
      responses:
        '200':
          description: Anonymous session
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                type: object
                properties:
                  sessionId:
                    description: Session id
                    type: string

  /player/status:
    get:
      tags:
        - Player
        - Protected
      summary: Gets the players current status
      parameters:
        - $ref: "#/parameters/Session"
      responses:
        '200':
          description: Player status
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                type: object
                properties:
                  sessionValid:
                    description: Is the session valid
                    type: boolean
                  touValid:
                    description: Has the user accepted the current TOU
                    type: boolean
                  performRealityCheck:
                    description: Does player need to perform reality check
                    type: boolean
                  playerTOU:
                    description: Player accepted version of TOU
                    type: string
                  portalTOU:
                    description: Portal version of TOU
                    type: integer
                    
                    
  /player/activate/:token:
    get:
      tags:
        - Player
        - Protected
      summary: Activates player account
      parameters:
        - $ref: "#/parameters/Session"
      responses:
        '200':
          description: Activation status
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"

        '400':
          description: Activation failed
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"

  
  /player/bonus:
    get:
      tags:
        - Player
        - Protected
        - Bonus
      summary: Gets the available bonuses for a player. also gets active freeround-bonus programs if player haven't yet made a deposit.
      parameters:
        - $ref: "#/parameters/Session"
        - name: paymentmethod
          in: query
          required: false
          type: string
          description: payment method for which to get bonuses.
        - name: onlyavailable
          in: query
          required: false
          type: boolean
          description: filter by availability
      responses:
        200:
          description: Player bonuses
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                type: array
                items:
                  $ref: '#/definitions/Bonus'
        400: 
          description: Unble to fetch bonuses
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
  
  /player/bonus/activate:
    post:
      tags:
        - Player
        - Protected
        - Bonus
      summary: Activate a selected bonus
      parameters:
        - $ref: "#/parameters/Session"
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              bonus_id:
                type: string
              bonus_code:
                type: string
                description: optional
      responses:
        200:
          description: Bonus applied
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                $ref: "#/definitions/Bonus"
        400: 
          description: Unble to fetch bonuses
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"   
                
  /player/bonus/validate:
    post:
      tags:
        - Player
        - Protected
        - Bonus
      summary: Validate a bonus based on bonus_code
      parameters:
        - $ref: "#/parameters/Session"
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              bonus_id:
                type: string
              bonus_code:
                type: string
                description: optional
      responses:
        200:
          description: Bonus validated
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                $ref: "#/definitions/Bonus"
        400: 
          description: Bonus not valid
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"   
  /player/bonus/deactivate:
    post:
      tags:
        - Player
        - Protected
        - Bonus
      summary: Deactivates currently selected bonus. Can only work if bonus is not yet applied
      parameters:
        - $ref: "#/parameters/Session"
      responses:
        200:
          description: Bonus validated
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
  /player/remaining/deposit:
    get:
      tags:
        - Player
        - Protected
      summary: Player remaining deposits regarding deposits limit
      parameters:
        - $ref: "#/parameters/Session"
      responses:
        200:
          description: Temaining deposits
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                properties:
                  amount_current:
                    type: number
                  amount_available: 
                    type: number
                  limit:
                    type: number
                  interval:
                    type: string                
  /player/game/{id}:
      get:
        tags:
          - Game Library
          - Protected
        summary: Get game
        description: >
          Possible error codes (resultCode): game_not_found, game_not_available
        parameters:
          - $ref: "#/parameters/Session"
          - name: id
            in: path
            required: true
            type: string
            description: Game id
          - name: play_for_fun
            in: query
            required: false
            type: boolean
            description: >-
              By default disabled, set to "true" to enable play for fun mode. Session
              header not require if this option is present
          - name: lang
            in: query
            required: false
            type: string
            default : en
            description: Default 'en'
          - name: homeurl
            in: query
            required: false
            type: string
            description: Home url or return url. All games may not support this, usually for mobile ones
        responses:
          '200':
            description: Game
            schema:
              type: object
              properties:
                info:
                  $ref: "#/definitions/Info"
                data:
                  type: object
                  properties:
                    license:
                      type: string
                      description: License name
                    url:
                      type: string
                      description: Game url
                    system:
                      type: string
                      description: System code (ne, gs, ...)
          '400':
            $ref: '#/responses/Info'
          401:
            $ref: "#/responses/AuthError"

  /player/games:
    head:
      tags:
        - Game Library
        - Protected
        - Player
      summary: > 
        Get the count of games available for the player. 
        
        Filters the game library based upon the logged in player's country and currency settings. Also will filter by the players current IP address for providers who do not allow play in certail countries.
      parameters:
        - $ref: "#/parameters/Session"
      responses:
        '200':
          description: Response headers
          headers:
            "x-game-count":
              type: integer
              description: Count of games for site.
        '401':
          description: Invalid session
          headers:
            "x-error-code":
              type: string
              description: error cod
    get:
      tags:
        - Game Library
        - Protected
        - Player
      summary: Get games list
      description: >
        Filters the game library based upon the logged in player's country and currency settings. Also will filter by the players current IP address for providers who do not allow play in certail countries.
      parameters:
        - $ref: "#/parameters/Session"
      responses:
        '200':
          description: Response object
          headers:
            "x-game-count":
              type: integer
              description: Count of games for player.
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                type: array
                items:
                  $ref: '#/definitions/Game'
  /player/games/favorites:
    head:
      tags:
        - Player
        - Protected
      summary: Get the count of player favorites
      description: > 
        Returns the count of player favorites in header.
      parameters:
        - $ref: "#/parameters/Session"
      responses:
        200:
          description: OK Favorites, found
          headers:
            "x-favorite-count":
              type: integer
              description: Count of favorites for player
        401:
            description: Invalid session
            headers:
              "x-error-code":
                type: string
                description: error code
    get:
      tags:
        - Player
        - Protected
      summary: Get a players favorite games.
      description: > 
        Retrieve the list of the players favorite games, as stored by the player. The platform provides an unlimited number of "slots" which are simply integers for storing the favorites. The system does not check for you if you assing more than one favorite to the same slot, so you may want to check that yourself.
      parameters:
        - $ref: "#/parameters/Session"
      responses:
        200:
          description: OK Favorites, found
          headers:
            "x-favorite-count":
              type: integer
              description: Count of favorites for player
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                $ref: '#/definitions/PlayerFavorites'
        401:
          description: Invalid session
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
        404: 
          description: Player has no favorites
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
    post:
      tags:
        - Player
        - Protected
      summary: Post a list of favorite games.
      description: > 
        Post an entire list of player favorites, will overwrite existing list.
      parameters:
        - $ref: "#/parameters/Session"
        - name: body
          in: body
          required: true
          schema:
            $ref : "#/definitions/PlayerFavorites"  
        
      responses:
        200:
          description: Ok, favorite list updated.
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
        201:
          description: Ok, favorite list created.
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
        401:
          description: Invalid sessionlimit
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
        400: 
          description: Invalid favorites data.
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
    put:
        tags:
          - Player
          - Protected
        summary: Add or modify a single favorite listing
        description: > 
          Add or modify a list of player favorites, keyed on game id.
        parameters:
          - $ref: "#/parameters/Session"
          - name: body
            in: body
            required: true
            schema:
              $ref : "#/definitions/PlayerFavorite"  
          
        responses:
          200:
            description: Existing Favorite updated.
            schema:
              type: object
              properties:
                info:
                  $ref: "#/definitions/Info"
          201:
            description: New Favorite created.
            schema:
              type: object
              properties:
                info:
                  $ref: "#/definitions/Info"
          401:
            description: Invalid session
            schema:
              type: object
              properties:
                info:
                  $ref: "#/definitions/Info"
          400: 
            description: Invalid favorites data.
            schema:
              type: object
              properties:
                info:
                  $ref: "#/definitions/Info"
    delete:
        tags:
          - Player
          - Protected
        summary: Remove a favorite listing
        description: > 
          Remove a favorite listing of player favorites, keyed on game id.
        parameters:
          - $ref: "#/parameters/Session"
          - name: body
            in: body
            required: true
            schema:
              $ref : "#/definitions/PlayerFavorite"  
          
        responses:
          200:
            description: Favorite deleted.
            schema:
              type: object
              properties:
                info:
                  $ref: "#/definitions/Info"
          401:
            description: Invalid session
            schema:
              type: object
              properties:
                info:
                  $ref: "#/definitions/Info"
          404: 
            description: Favorite not found
            schema:
              type: object
              properties:
                info:
                  $ref: "#/definitions/Info"
  /player/games/ratings:
    head:
      tags:
        - Player
        - Protected
        - Reviews
      summary: Get the count of player ratings
      description: > 
        Returns the count of player ratings in header.
      parameters:
        - $ref: "#/parameters/Session"
      responses:
        200:
          description: OK Ratings found
          headers:
            "x-count":
              type: integer
              description: Count of ratings for player
        401:
            description: Invalid session
            headers:
              "x-error-code":
                type: string
                description: error code
    get:
      tags:
        - Player
        - Protected
        - Reviews
      summary: Get a players ratings.
      description: > 
        Retrieve a list of players game ratings.
      parameters:
        - $ref: "#/parameters/Session"
      responses:
        200:
          description: OK Ratings found
          headers:
            "x-count":
              type: integer
              description: Count of ratings for player
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                $ref: '#/definitions/PlayerRatings'
        401:
          description: Invalid session
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
        404: 
          description: Player has no ratings
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
    
    put:
        tags:
          - Player
          - Protected
          - Reviews
        summary: Add a single rating 
        description: > 
          Add a player game rating.
        parameters:
          - $ref: "#/parameters/Session"
          - name: body
            in: body
            required: true
            schema:
              $ref : "#/definitions/PlayerRating"  
          
        responses:
          201:
            description: New Rating created.
            schema:
              type: object
              properties:
                info:
                  $ref: "#/definitions/Info"
          401:
            description: Invalid session
            schema:
              type: object
              properties:
                info:
                  $ref: "#/definitions/Info"
          400: 
            description: Invalid ratings data.
            schema:
              type: object
              properties:
                info:
                  $ref: "#/definitions/Info"
    delete:
        tags:
          - Player
          - Protected
          - Reviews
        summary: Remove game rating.
        description: > 
          Delete a game rating
        parameters:
          - $ref: "#/parameters/Session"
          - name: body
            in: body
            required: true
            schema:
              $ref : "#/definitions/PlayerRating"  
        responses:
          200:
            description: Rating deleted.
            schema:
              type: object
              properties:
                info:
                  $ref: "#/definitions/Info"
          401:
            description: Invalid session
            schema:
              type: object
              properties:
                info:
                  $ref: "#/definitions/Info"
          404: 
            description: Rating not found
            schema:
              type: object
              properties:
                info:
                  $ref: "#/definitions/Info"
  /player/games/latests:
    get:
      tags:
        - Player
        - Protected
      summary: Get a list of the last 30 player game launches.
      description: > 
        Retrieve a list players lastes game launches.
      parameters:
        - $ref: "#/parameters/Session"
      responses:
        200:
          description: OK Latests found.
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                $ref: '#/definitions/PlayerLatests'
        401:
          description: Invalid session
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
        404: 
          description: Player has no latests
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
  /player/games/transactions:
    get:
      tags:
        - Player
        - Game Library
        - Protected
      summary: Get player game transactions
      parameters:
        - $ref: "#/parameters/Session"
        - name: from
          in: query
          required: false
          type: string
          format: date-time
        - name: to
          in: query
          required: false
          type: string
          format: date-time
      responses:
        '200':
          description: Response object
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                type: array
                items:
                  $ref: '#/definitions/GameTransaction'
        '401':
          $ref: '#/responses/Error'  
  
  /player/login:
    post:
      tags:
        - Player
        - Auth
      summary: Log a player in to the system.
      description: >
        Log a player in on to the platform.
        
        Possible error codes (resultCode): missing_password, missing_username, invalid_username_or_password, account_blocked, account_deactivated, account_frozen, account_pending, account_unactivated
            
      parameters:
        - $ref: "#/parameters/AnonSession"
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              username:
                type: string
              password:
                type: string
      responses:
        '200':
          description: Login successful.
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                $ref: '#/definitions/Player'
        '401':
          $ref: '#/responses/Error'

  /player/changepass:
    post:
      tags:
        - Player
      summary: Player change password
      description: >
        Possible error codes (resultCode): old_password_missing, new_password_missing, invalid_old_password, invalid_new_password
      parameters:
        - $ref: "#/parameters/Session"
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              old_password:
                type: string
              new_password:
                type: string
      responses:
        200:
          description: Password changed successfuly
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
        400:
          $ref: '#/responses/Info'
  /player/logout:
    get:
      tags:
        - Player
        - Auth
        - Protected
      summary: Player logout
      parameters:
        - $ref: "#/parameters/Session"
      responses:
        '204':
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
          description: Logout successful
        '401':
          $ref: '#/responses/Info'
  /player/forgottenpass:
    post:
      tags:
        - Player
        - Auth
      summary: >
        Request a password reset. Email is to be sent. Token inside email. This API is only returning success/fail.
      description: >
        Possible error codes (resultCode): missing_email, player_not_found, account_blocked
      parameters:
        - $ref: "#/parameters/AnonSession"
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
      responses:
        '200':
          description: Reset token
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
        '401':
          $ref: '#/responses/Info'


  /termsofuse/:
    get:
      tags:
        - Terms of Use
      summary: Retrieves latest TOU text, in all avail languages.
      parameters:
        - $ref: "#/parameters/AnonSession"
      responses:
        '200':
          description: Retrieved TOU information
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                type: array
                items:
                    type: object
                    properties:
                      langCode:
                        type: string
                        description: Two letter ISO language code
                      touPlainText:
                        type: string
                        description: Terms of use text as plain text.
                      touVersion:
                        type: integer
                        description: The version number of the current TOU
        '401':
          $ref: '#/responses/Info'
          
  /termsofuse/{langCode}:
    get:
      tags:
        - Terms of Use
      summary: Latest published Terms of Use
      parameters:
        - $ref: "#/parameters/AnonSession"
        - name: langCode
          in: path
          required: true
          type: string
          maxLength : 2
          minLength : 2
          description: Two letter ISO language code to return to TOC.
            
      responses:
        '200':
          description: Retrieved TOU information
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                type: object
                properties:
                  touPlainText:
                    type: string
                    description: Terms of use text as plain text.
                  touVersion:
                    type: integer
                    description: The version number of the current TOU
        '401':
          $ref: '#/responses/Info'

    
  /player/termsofuse:  
    post:
      tags:
        - Player
        - Protected
      summary: > 
          Marks a player that he accepted terms of use. The version of TOU must be sent in payload, to prevent
          concurrency issues (newly published versions, etc.)
      description: >
        Possible error codes (resultCode): missing_version, invalid_version
      parameters:
        - $ref: "#/parameters/Session"
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              terms:
                type: number
                
      responses:
        '200':
          description: Accepted use of terms. 
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                type: object
                properties:
                  terms:
                    type: number
        '401':
          $ref: '#/responses/Info'

  /player/resetpass/{token}:
    post:
      tags:
        - Player
        - Auth
      summary: Reset a players password
      description: >
        Possible error codes (resultCode): missing_password, invalid_input, token_expired
      parameters:
        - $ref: "#/parameters/AnonSession"
        - name: token
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              password:
                type: string
                description: New password
      responses:
        '200':
          description: Reset token
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
        '400':
          $ref: "#/responses/InvalidPlayerdata"
  
  /player/balance:
    get:
      tags:
        - Player
        - Cashier
        - Protected
      summary: Player balance
      parameters:
        - $ref: "#/parameters/Session"
      responses:
        '200':
          description: Player balance
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                type: object
                properties:
                  balance:
                    type: number
                    format: double
                  bonus:
                    type: number
                    format: double
                  currencycode:
                    type: string
                  currencysymbol:
                    type: string
                  status:
                    type: string
        '401':
          $ref: '#/responses/Info'
  /player/transactions:
    get:
      tags:
        - Player
        - Cashier
        - Protected
      summary: Get players transactions
      parameters:
        - $ref: "#/parameters/Session"
        - name: from
          in: query
          required: false
          type: string
          format: date-time
        - name: to
          in: query
          required: false
          type: string
          format: date-time
      responses:
        '200':
          description: Response object
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                type: array
                items:
                  $ref: '#/definitions/Transaction'
        '401':
          $ref: '#/responses/Info'
  /player/messages:
    get:
      tags:
         - Player
         - Cashier
         - Protected
      summary: 'Get messages for player ( deposit/withdraw confirations, Errors)'
      parameters:
        - $ref: "#/parameters/Session"
      responses:
        '200':
          description: Response object
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                type: array
                items:
                  type: object
                  properties:
                    message:
                      type: string
                    type:
                      type: string
                      enum:
                        - notification
                        - Error

  /player/cashier/custom/fields/{transtype}:
    get:
      summary: Custom cashier (form)
      tags:
        - Cashier
        - Player
        - Protected
      description: >
        Lists all available deposit and withdraw methods for the active player
        with fields to build up custom deposit/withdraw forms

        Possible error codes (resultCode): payment_processor_invalid_parameters, payment_processor_error
      parameters:
        - $ref: "#/parameters/Session"
        - name: x-language
          in: header
          required: false
          type: string
          description: Defaults to en_GB
        - name: transtype
          in: path
          required: true
          type: string
          enum:
            - deposit
            - withdrawal
            - both
          
          description: deposit or withdraw, or both
      responses:
        '200':
          description: Payment url
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                type: object
                properties:
                  deposit_methods:
                    type: array
                    items:
                      $ref: "#/definitions/paymentMethod"
                  withdraw_methods:
                    type: array
                    items:
                      $ref: "#/definitions/paymentMethod"
        401:
          $ref : "#/responses/Error"
  
  /player/cashier/payment/{processor}/{method}/{type}:
    post:
      summary: Payment submit form
      tags:
        - Cashier
        - Player
        - Protected
      description: >
        Lists all fields to be posted
        Possible error codes (resultCode): payment_processor_invalid_parameters, payment_processor_error
      parameters:
        - $ref: "#/parameters/Session"
        - name: x-language
          in: header
          required: false
          type: string
          description: Defaults to en_GB
        - name: body
          in: body
          required: true
          description: list off all fields to be posted
          schema:
            $ref: "#/definitions/PaymentSubmit"
        - name: processor
          in: path
          required: true
          type: string
          description: payment processor (paymentiq,..)
        - name: method
          in: path
          required: true
          type: string
          description: payment method
        - name: type
          in: path
          required: true
          type: string
          enum:
            - deposit
            - withdrawal
          description: deposit/withdrawal
      responses:
        '200':
          description: success output
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                type: object
                properties:
                  redirect:
                    description: a redirect object
                    type: object
                    properties:
                      method:
                        type: string
                        description: HTTP method to use when redirecting
                        enum:
                          - POST
                          - GET
                      container: 
                        type: string
                        description: a container to use (iFrame or window)
                        enum:
                          - iframe
                          - window
                      url:
                        type: string
                        description: a redirect url
                      parameters:
                        type: object
                        description: params to include in redirect url 
                      html:
                        type: string
                        description: string of HTML to display
                      width:
                        type: string
                        description: the width in pixels of redirect container
                      height:
                        type: string
                        description: the height in pixels of redirect container
                  messages:
                    description: a list of messages
                    type: array
                    items:
                      $ref: "#/definitions/TransMessage"
                  bitcoin_wallet:
                    description: a bitcoin wallet object
                    type: object
                    properties:
                      qr_image:
                        type: string
                        description: url to a QR code image encoding the wallet and amount
                      address:
                        type: string
                        description: bitcoin wallet address
                  status: 
                    description: states of transaction
                    type: string
                    enum:
                      - redirect
                      - complete
        401:
          $ref: "#/responses/InvalidPaymentdata"

  /player/cashier/status/{transactionid}:
    get:
      summary: get the information about a particular payment transaction
      tags: 
        - Cashier
        - Player
        - Protected
      description: get the information about a particular payment transaction from the payment processor
      parameters:
        - name: transactionid
          in: path
          required: true
          type: string
          description: id of the transaction we need status of
      responses:
        '200':
          description: Transaction info
          schema:
            type: object
            properties:
              status:
                type: string
                description: transaction status
              record:
                description: a list of error messages
                type: array
                items:
                  $ref: "#/definitions/Error"
              fields:
                description: a list of fields errors
                type: array
                items:
                  $ref: "#/definitions/InvalidField"
              messages:
                description: a list of success messages
                type: array
                items:
                  $ref: "#/definitions/TransMessage"
        '404':
          description: transaction with transactionid not found (TBD)

  /player/cashier/transactions/{operation}/{processor}:
    get:
      tags:
        - Player
        - Cashier
        - Protected
      summary: Get cashier url
      description: >
        
        ### Test credit cards:


        #### Credit cards N3DS: 
        
        - `4907639999990022`
        
        - `5546989999990033`
        
        - `4775889400000171`
        
        - `4917484589897107`
        
        - `4012000033330026`
        
        - `5432673003275469`


        #### Credit cards 3DS:

        - `4000000000000002`; exp. date = 01/2018

        - `5200000000000106`; exp. date = 04/2018


        AstropayCard:

        - `1606482490412232`; exp. Date = 08/2016, CVV code: 6771


        ### Possible error codes (resultCode): payment_processor_error, payment_processor_invalid_parameters
      parameters:
        - $ref: "#/parameters/Session"
        - name: operation
          in: path
          required: true
          type: string
          enum:
            - deposit
            - withdraw
          description: Operations 'deposit' or 'withdrawal'
        - name: processor
          in: path
          required: true
          type: string
          description: Set to 'piq'
        - name: lang
          in: query
          required: false
          type: string
          default: en_GB
          description: Defaults to en_GB
      responses:
        '200':
          description: Payment url
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                type: string
                description: Thee payment URL (for see in Iframe)
        '401':
          $ref: '#/responses/Error'
  /player/cashier/accounts:
    get:
      tags:
        - Player
        - Cashier
        - Protected
        - Unimplemented
      summary: Retrieve the players payment accounts
      description: >
        Retrieves all accounts for the player. These accounts, with their ids,
        can be used to implement quick payment functionality by sending accountIds
        instead of card information when excecuting transactions.

        ### Possible error codes (resultCode): payment_processor_error, payment_processor_invalid_parameters

      parameters:
        - $ref: "#/parameters/Session"
        - name: type
          in: query
          description: Only returns the passed account type if passed.
          required: false
          type: string 
        - name: showExpired
          in: query
          description: Include expired accounts in the result
          required: false
          type: boolean
          default: false
      responses:
        200:
          description : Accounts Found
          schema: 
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                type: object
                properties:
                  methods:
                    type: array
                    items:
                      $ref: "#/definitions/PlayerAccount"
            
                
          
        400:
          description: Error
  
  /player/limits:
    get:
      tags: 
      - Limits
      summary: Player limits / restrictions
      parameters:
        - $ref: "#/parameters/Session"
      responses:
        200:
          description : Player limits
          schema: 
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                type: object
                properties:
                  time:
                    type: object
                    description: Session time limit
                    properties:
                      amount:
                        type: number
                        description: Session timeout limit in secconds
                      bet:
                        type: object
                        description: Bet limit
                        properties:
                          amount:
                            type: number
                            description: Bet amount limit
                          interval:
                            type: string
                            enum:
                              - day
                              - week
                              - month
                      loss:
                        type: object
                        description: Loss limit
                        properties:
                          amount:
                            type: number
                            description: Loss amount limit
                          interval:
                            type: string
                            enum:
                              - day
                              - week
                              - month
                      deposit:
                        type: object
                        description: Daily deposit limit
                        properties:
                          amount:
                            type: number
                            
  /player/limits/{type}:
    post:
      tags: 
        - Limits
      summary: Set player limit / restriction
      parameters:
        - $ref: "#/parameters/Session"
        - name: type
          in: path
          type: string
          required: true
          enum: 
            - time
            - bet
            - loss
            - deposit
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              password:
                type: string
                description: Player password
              amount:
                type: number
                description: bet/loss/desposit (money), time (seconds)
              interval:
                type: string
                description: Required only by bet/loss
                enum:
                  - day
                  - week
                  - month
      responses:
        200:
          description : Success
          schema: 
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
        400:
          $ref: '#/responses/Error'
        412:
          description: limit_below_zero
          schema:
            type: object
            properties:
              info:
                type: object
                properties:
                  success:
                    type: boolean
                    default: false
                  resultCode:
                    type: string
                  message:
                    type: string
                  responseTime:
                    type: number
                    format: float
          
  /player/freeze:
    post:
      tags: 
        - Limits
      summary: Freez player account for number rof days
      parameters:
        - $ref: "#/parameters/Session"
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              password:
                type: string
                description: Player password
              amount:
                type: number
                description: Number of days
      responses:
        200:
          description : Success
          schema: 
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
        400:
          $ref: '#/responses/Error'
          
  /player/deactivate:
    post:
      tags: 
        - Limits
      summary: Deactivate player account
      parameters:
        - $ref: "#/parameters/Session"
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              password:
                type: string
                description: Player password
      responses:
        200:
          description : Success
          schema: 
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
        400:
          $ref: '#/responses/Error'
  
  /validate:
    get:
      tags:
        - Validation
      summary: > 
        Get the list of available validators.
      description: >
        To use a single field validator, you can call the validator with a GET with the following pattern:
            
          `/validate/[validatorKey]/[value]`
        
        To retrieve the JS code to use directly on your page you can GET the small
        .js file using the following pattern.
        
          `/validate/js/[validatorKey].js`
          
      parameters:
        - $ref: "#/parameters/AnonSession"
      responses:
        200:
          description: >
            Returns a list of all available validators.
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                type: array
                items:
                  $ref: "#/definitions/Validator"
        400:
          $ref: "#/responses/Error"
  /validate/js/{validatorKey}.js:
    get:
      tags:
        - Validation
      description: Retrieves the Javascript code which can be used to validate the designated type of data.
      parameters:
        - name: validatorKey
          in: path
          required: true
          type: string
      responses:
        200:
          description: Javascript file
          schema:
            type: file
            format: application/js
  /validate/{validatorKey}/{value}:
    get:
      tags:
        - Validation
      summary: > 
        Validate a value against the passed validator
      parameters:
        - $ref: "#/parameters/AnonSession"
        - name: validatorKey
          in: path
          required: true
          type: string
        - name: value
          in: path
          required: true
          type: string
      responses:
        200:
          description: Valid value
          headers:
              x-is-valid:
                description: Is the value valid (false)
                type: boolean
          schema: 
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
        412:
          description: The value is NOT valued with the passed validator
          headers:
              x-is-valid:
                description: Is the value valid (false)
                type: boolean
          schema: 
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                $ref: "#/definitions/Validator"
    head:
        tags:
          - Validation
        summary: > 
          Validate a value against the passed validator
        parameters:
          - name: validatorKey
            in: path
            required: true
            type: string
          - name: value
            in: path
            required: true
            type: string
        responses:
          200:
            description: Headers only response
            headers:
              x-is-valid:
                description: Is the value valid (true)
                type: boolean
          412:
            description: The value is NOT valued with the passed validator
            headers:
              x-is-valid:
                description: Is the value valid (false)
                type: boolean
  /validate/player/email/{email}:
    get:
      tags:
        - Player
        - Validation
      summary: Check the validity of a email
      description: >
        Checks the submitted email to see if is valid for a new user for the site. Checks duplicates and email validity.
        ### Possible error codes (resultCode): invalid_input
      parameters:
        - $ref: "#/parameters/AnonSession"
        - name: email
          in: path
          required: true
          type: string
      responses:
        200:
          description: OK, submitted email is valid, and can be used for a new player
          schema: 
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
        409: 
          description: Invalid, the specificed email can **not** be used for new player registration.
          schema: 
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
        400: 
          description: The email was not submitted correctly, can not validate the username.
          schema: 
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
  /validate/player/username/{username}:
    get:
      tags:
        - Player
        - Validation
      summary: Check the validity of a username
      description: >
        Checks the submitted username to see if is valid for a new user for the site. Checks duplicates and username standards.
        ### Possible error codes (resultCode): invalid_input
      parameters:
        - $ref: "#/parameters/AnonSession"
        - name: username
          in: path
          required: true
          type: string
      responses:
        200:
          description: OK, submitted username is valid, and can be used for a new player.
          headers:
            'x-username-valid':
              type: boolean
        409: 
          description: Invalid, the specificed username can **not** be used for new player registration.
          headers:
            'x-username-valid':
              type: boolean
        400: 
          description: The username was not submitted correctly, can not validate the username.
          
  /lists/{action}/{type}:
    get:
      tags:
        - Lists
      summary: |
        Can be used to obtain top/latest winners, wins or losers.
        'Latest losers' combination is not yet implemented, and it will not work.
      parameters:
        - name: action
          in: path
          required: true
          type: string
          description: Can be one of the following - `top` or `latest`
        - name: type
          in: path
          required: true
          type: string
          description: Can be one of the following - `winners` or `wins` or `losers`
        - name: count
          in: query
          required: false
          type: integer
          default: 10
          description: Changes amount of results returned
        - name: gameId
          in: query
          required: false
          type: string
          description: If provided, results will be limited to chosen game
        - name: fromDate
          in: query
          required: false
          type: string
          description: If provided, results will be limited from this date
        - name: toDate
          in: query
          required: false
          type: string
          description: If provided, results will be limited to this date
      responses:
        '200':
          description: Response object
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                type: array
                items:
                  type: object
                  properties:
                    amount:
                      type: number
                      description: Depends on action and type
                    timestamp:
                      type: string
                      description: Depends on action and type
                    name:
                      type: string
                    country:
                      type: string
                    gender:
                      type: string
                      enum:
                        - M
                        - F
                    isOnline:
                      type: boolean
                    gameid:
                      type: string
                    currencyCode:
                      type: string
                    currencySymbol:
                      type: string
        '501':
          description: |
            In case of latest losers.
            Latest losers feature is not yet implemented

  /lists/ggr:

    get:
      tags:
        - Lists
      summary: |
        Can be used to obtain GGR for players in last 24h
      parameters:
        - name: count
          in: query
          required: false
          type: integer
          default: 10
          description: Changes amount of results returned

      responses:
        '200':
          description: Response object
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                type: array
                items:
                  type: object
                  properties:
                    amount:
                      type: number
                      description: Depends on action and type
                    name:
                      type: string
                    country:
                      type: string
                    gender:
                      type: string
                      enum:
                        - M
                        - F
                    isOnline:
                      type: boolean
                    currencyCode:
                      type: string
                    currencySymbol:
                      type: string


  /licence/mga/realityCheckData:
    get:
      tags:
        - Player
        - Protected
      summary: Gets the players reality check data
      parameters:
        - $ref: "#/parameters/Session"
      responses:
        '200':
          description: Player reality check data
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                type: object
                properties:
                  bet:
                    description: Total bets amount
                    type: string
                  win:
                    description: Total wins amount
                    type: string
                  net:
                    description: Wins - bets
                    type: string
                  timePlayed:
                    description: Player session time
                    type: string
  
              
  /licence/mga/confirmRealityCheck:
    get:
      tags:
        - Player
        - Protected
      summary: Flag player as reality checked
      parameters:
        - $ref: "#/parameters/Session"
      responses:
        '200':
          description: Flag player as reality checked
          schema:
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                  description: is player flaged as reality checked
                  type: boolean        



  /player/freeround-programs:
    get:
      tags: 
        - Freerounds
      summary: Gets all active programs definition and status of programs for a player
      parameters:
        - $ref: "#/parameters/Session"
      responses:
        200:
          description : Success
          schema: 
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                type: array
                items:
                  $ref: "#/definitions/Program"
        400:
          $ref: '#/responses/Error'


  /player/freeround-programs/{slug}:
    get:
      tags: 
        - Freerounds
      summary: Gets active program definition and status of a player, for a specific program by slug ( code )
      parameters:
        - $ref: "#/parameters/Session"
        - name: slug
          in: path
          required: true
          type: string
          description: program unique identifier, a slug
      responses:
        200:
          description : Success
          schema: 
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                $ref: "#/definitions/Program"
        400:
          $ref: '#/responses/Error'
          
  

  /player/freeround-programs/{slug}/allocate:
    post:
      tags: 
        - Freerounds
      summary: Allocates new set of freeround for a player based definition of the award inside a program. 
      parameters:
        - $ref: "#/parameters/Session"
        - name: slug
          in: path
          required: true
          type: string
          description: program unique identifier, a slug
        - name: payload
          in: body
          schema: 
            type: object
            properties:
              game:
                type: string
                description: a game id
              rounds:
                type: number
                format: integer
                description: a number of freerounds that player wants to allocate
      responses:
        200:
          description : Success
          schema: 
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                $ref: "#/definitions/Program"
        400:
          $ref: '#/responses/Error'

  /player/authhub/login:
    post:
      tags: 
        - Auth hub
      summary: Initiates process to transfer player to another CE
      parameters:
        - $ref: "#/parameters/Session"
        - name: payload
          in: body
          schema: 
            type: object
            properties:
              authType:
                type: string
                description: type of login/switch ('currency')
              using:
                type: string
                description: login using what ('BTC'/'EUR')
      responses:
        200:
          description : Success
          schema: 
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                type: object
                properties:
                  sessionId:
                    type: string
                    description: new x-igp-session
        400:
          $ref: '#/responses/Error'




  /service/player/forceLogin:
    post:
      tags: 
        - Auth hub
      summary: Used by authHub to force login player to CE
      parameters:
        - name: payload
          in: body
          schema: 
            type: object
            properties:
              playerId:
                type: string
                description: player id
              portalId:
                type: string
                description: portal id
        - $ref: "#/parameters/ApiKey"
      responses:
        200:
          description : Success
          schema: 
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
        400:
          $ref: '#/responses/Error'
          
          
  /player/loyaltyPoints:
    get:
      tags: 
        - Auth hub
      summary: returns player loyalty points for all portals
      parameters:
        - $ref: "#/parameters/Session"
      responses:
        200:
          description : Success
          schema: 
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                type: object
                properties:
                  playerId:
                    type: string
                    description: player id
                  eventName:
                    type: string
                    description: eventName
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        loyaltyPoints:
                          type: number
                          description: Total number of player loyalty points
                        portalId:
                          type: string
                          description: Portal id           
        400:
          $ref: '#/responses/Error'

  /service/player/loyaltyPoints:
    get:
      tags: 
        - Auth hub
      summary: returns player loyalty points for all portals
      parameters:
        - name: x-player-id
          in: header
          required: true
          type: string
        - name: x-portal-id
          in: header
          required: true
          type: string
        - $ref: "#/parameters/ApiKey"
      responses:
        200:
          description : Success
          schema: 
            type: object
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                type: object
                properties:
                  playerId:
                    type: string
                    description: player id
                  eventName:
                    type: string
                    description: eventName
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        loyaltyPoints:
                          type: number
                          description: Total number of player loyalty points
                        portalId:
                          type: string
                          description: Portal id           
        400:
          $ref: '#/responses/Error'
          
  /service/cache/clear:
    get:
      tags:
        - Cache
      parameters:
        - $ref: "#/parameters/ApiKey"
      summary: Clears cache on site provider and igp-internal-apis
      responses:
        200:
          description: Cache cleared on both IGP site provider and internal-apis
          schema:
            properties:
              info:
                $ref: "#/definitions/Info"
        500:
          description: |
            Error while clearing cache in igp-internal-apis.
            However, cache on site provider should be cleared
          schema:
            properties:
              info:
                $ref: "#/definitions/Info"
              data:
                description: Response from igp-internal-apis


definitions:

  PlayerAccount:
    type: object
    description: the decription
    properties:
      type:
        type: string
        description: the type of the account (creditcard, skrill, etc)
      accountId: 
        type: string
        description: the internal reference to this account
      maskedAccount:
        type: string
        description: For credit cards this includes the credit card number to be displayed for this player account, masked for complience purposes.
      lastUsed:
        type: string
        format: date-time
      cardType:
        type: string
      cardHolder:
        type: string
        description: The name of the person, as it appears on the card/account
      startDate:
        type: string
        format: date-time
      expiryDate:
        type: string
        format: date-time     
      
  
  PlayerFavorites:
    description: Collection of player favorites.
    type: array
    items:
      $ref: "#/definitions/PlayerFavorite"
  
  PlayerLatests:
    description: Collection of player latest games.
    type: array
    items:
      $ref: "#/definitions/PlayerLatest"
  PlayerRatings:
    description: Collection of player game ratings.
    type: array
    items:
      $ref: "#/definitions/PlayerRating"
      
  PlayerFavorite:
    description: Storage of player
    type: object
    required:
      - slot
      - gameId
      - dateAdded
    properties:
      slot:
        type: integer
        default : 0
        description: the orginal, base 0 slot number of the favorite
      gameId:
        type: string
        description: The internal id of the game favorited.
      dateAdded:
        type: string
        format: date-time
    
  PlayerLatest:
    description: Latest game data for player.
    type: object
    properties:
      game:
        $ref: "#/definitions/Game"
      launchdatetime:
        type: string
        format: date-time
 
  PlayerRating:
    description: A player game rating
    type: object
    properties:
      ratingId:
        type: string
        minLength: 5
        maxLength: 24
        description: System generated, or provided rating id.
      ratingScore:
        type: integer
      gameid:
        type: string
      ratingDate:
        type: string
        format: date-time
      ratingNote:
        type: string
        description: Text rating of the game by player.

  Game:
    description: Game object
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      type:
        type: string
      subcategory:
        type: string
      details:
        type: string
      new:
        type: string
      system:
        type: string
      position:
        type: string
      category:
        type: string
      image:
        type: string
      image_preview:
        type: string
      mobile:
        type: boolean
      play_for_fun_supported:
        type: boolean
      ishomelicencesend:
        type: boolean
      license:
        type: string
      order:
        type: integer
        description: The defined sort order for the game.
      tags:
        type: array
        description: An array of tags associated with the game
        items:
          type: string
  Player:
    description: Player object
    type: object
    required:
      - username
      - email
      - fname
      - lname
      - terms
    properties:
      version:
        type: integer
        description: the internal system revision id. Must be submitted with patch.
      username:
        type: string
      email:
        type: string
      fname:
        type: string
      lname:
        type: string
      terms:
        type: boolean
      newsletter:
        type: boolean
        description: (optional)
      gender:
        type: string
        description: (optional)
        enum:
          - M
          - F
      birthdate:
        type: string
        description: YYYY-MM-DD
      address:
        type: string
      city:
        type: string
      zip:
        type: string
      mobile:
        type: string
      phone:
        type: string
      countrycode:
        type: string
        description: two letter country code
      currencysymbol:
        type: string
      languagecode:
        type: string
        description: language locale code
        example: 
          - en_GB
          - it_IT
      sessionid:
        type: string
  
  
  InstantPlayerInput:
    description: >
      The  most basic  player data required for a player creation.
      
      **The created player will NOT be able to deposit, withdraw or play with realmoney when creating players with this data**
    type: object
    required:
      - username
      - email
      - password
      - password_confirm

    properties:
      username:
        type: string
      email:
        type: string
      password:
        type: string
      password_confirm:
        type: string
        description: Must be the same as the password.
      countrycode:
        type: string
        description: two letter country code in lowercase
      captcha:
        type: string
  
  
  
  CorePlayerInput:
    description: >
      The  basic player data required for a player registration. 
    type: object
    required:
      - username
      - email
      - fname
      - lname
      - password
      - password_confirm
      - terms
      - birthdate
      - countrycode
    properties:
      username:
        type: string
      email:
        type: string
      fname:
        type: string
      lname:
        type: string
      password:
        type: string
      password_confirm:
        type: string
        description: Must be the same as the password.
      terms:
        type: integer
        description: The version number of the Terms of Use which was accepted.
      birthdate:
        type: string
        description: YYYY-MM-DD
      countrycode:
        type: string
        description: two letter country code in lowercase
      captcha:
        type: string
      ref_code:
        type: string
        description: Referral code (optional)
      affiliate_system:
        type: string
        description: Affiliate system (optional)
      affiliate_id:
        type: string
        description: Affiliate id (optional)
        
  CorePlayerUpdate:
    description: >
      Updatable player data
    type: object
    properties:
      email:
        type: string
      password:
        type: string
      password_confirm:
        type: string
        description: required if password is set
      countrycode:
        type: string
        description: two letter lowercase country code
      languagecode:
        type: string
        description: language locale code
        example:
          - en_GB
          - it_IT
      address:
        type: string
      city:
        type: string
      zip:
        type: string
      phone:
        type: string
      mobile:
        type: string
      newsletter:
        type: boolean

  Transaction:
    description: Player transaction
    type: object
    properties:
      id:
        type: number
        description: unique id
      amount:
        type: number
        description: amount of deposit/withdrawal
      start_balance:
        type: number
        description: users start balance before deposit/withdrawal action
      end_balance:
        type: number
        description: users end balance after deposit/withdrawal action
      email:
        type: string
        description: users email address
      date_request:
        type: string
        format: date-time
        description: datetime when user requested deposit/withdrawal
      date_processed:
        type: string
        format: date-time
        description: datetime when transaction is processed by payment processor
      status:
        type: string
        description: transaction status ('PENDING','PROCESSED','FAILED','CANCELLED','ERROR','DENIED','IN PROGRESS')
      withdrawals_limit_exceeded:
        type: boolean
        description: user has exceeded his withdrawal limit
      type:
        type: string
        description: payment type (deposit/withdrawal)
      instrument:
        type: string
        description: payment processor
      instrument_type:
        type: string
        description: payment method
      instrument_transid:
        type: string
        description: unique transaction id
      message:
        type: string
        description: message in case of success
      error_message:
        type: string
        description: error message in case of an error
  
  PlayerData:
    description: >
      Object for submitting updates to player profile data. Similar to `PlayerRegistration`, but it is hardcoded to the PlayerProfile schema.
    type: object
    required:
      - version
    properties:
      version:
        description: > 
         The internal system revisionID, which was received from player GET. Submitting the revision id back to the system on update ensures that you will not unknowingly overwrite a concurent request.
        type: integer
      fields:
        type: array
        items:
          $ref: "#/definitions/FieldInstance"
  
  PlayerRegistration:
    description: |
      Object for submitting player registration data. Since player registration data is dynamic, and based on
      dynamic schemas, with dynamic value types, registration data is submitted using an object which contains
      arrays of the 4 possible value types; 
        
        * strings
        * numbers
        * arrays
        * objects
        
        This combination of field name, type and value is termed a FieldInstance.

    type: object
    properties:
      terms:
        type: number
      affiliate_system:
        type: string
        description: Affiliate system (optional)
      affiliate_id:
        type: string
        description: Affiliate id (optional)
      newsletter:
        type: boolean
        description: Should player receive newsletter
      schemaCode:
        $ref: "#/definitions/SchemaCode"
      fields:
        type: array
        items:
          $ref: "#/definitions/FieldInstance"
          
  PaymentSubmit:
    description: |
      Object for submitting a payment.
    type: object
    properties:
      successUrl:
        type: string
        description: Return url in case of success
      failureUrl:
        type: string
        description: Return url in case of failure
      fields:
        type: array
        items:
          $ref: "#/definitions/FieldInstance"
  
  PlayerSchema:
    type: object
    description: >
      Player Schemas are both data models and form views for player data on the Gaming Portal. PlayerSchemas are used
      both in the registration process as well as in the Player Profile. A PlayerSchema is identified by a name
      and a unique code, and contains an array of fields.
    properties:
      schemaName:
        type: string
        description: A human readable description of the player schema object.
      schemaCode:
        $ref: "#/definitions/SchemaCode"
      fields:
        description: An array of the fields used in the 
        type: array
        items:
          $ref: "#/definitions/FieldDef"

  SchemaCode:
    type: string
    description: Short code for the player schema
  
  Field:
    type: object
    description: Base definition of a field, which is then either a FieldInstance, or a FieldDefinition.
    required:
      - code
    properties:
      code:
        type: string
        description: unique code for the field
  
  InvalidField:
    type: object
    properties:
      code:
        type: string
        description: unique code for the field
      validators:
        description: Array of validators, with only the required fields.
        type: array
        items:
            $ref: "#/definitions/Validator"

      
  FieldInstance:
    description: Base field instance, for which all field instance types are desendant. 
    type: object
    required:
      - dataType
      - code
    properties:
        code:
          type: string
          description: the fieldDef code
        dataType:
          $ref: "#/definitions/DataType"
          
        valueStr:
          type: string
        valueNum:
          type: number
        valueObj:
          type: object
        valueArr:
          type: array
          items:
              type: string
        valueBool:
          type: boolean

  FieldDef:
    allOf:
      - $ref : "#/definitions/Field"
      - type : object  
        properties:
          name:
            type: string
            description: human readable name of the field
          code:
            type: string
            description: unique code for the field
          fieldType:
            type: string
            description: >
              The field type. One of the supported field types. Some field types have special handling and purpose.
              For example; the TAC type is a special field for Terms and Conditions.
            enum:
              - date
              - datetime
              - boolean
              - password
              - dropdown
              - float
              - link
              - multiselect
              - radio
              - string
              - text
              - number
              - tel
              - color
              - TAC
              - Country
              - hidden
          dataType:
            $ref: "#/definitions/DataType"
        
          HTML5Hint:
            type: string
            description: A hint to the preffered HTML5 input widget to use for this field.
            enum:
              - search
              - email
              - url
              - tel
              - number
              - range
              - date
              - month
              - week
              - time
              - datetime
              - datetime-local
              - color
          cssclass:
            type: string
            description: Suggested/mapped css class
          order:
            type: integer
            description: suggests field order
          group:
            type: string
            description: the group that the field belongs to
          defaultValue:
            description: The default value "slug" for a dropdown or multiselect type (only)
            type: string
          required:
            type: boolean
            description: This field is required, and must have a valid value.
          Updatable:
            type: boolean
            default: true
            description: If false, this field can not be changed by the API after original submission, due to sustem or complience reasons.
          valueList:
            type: array
            items:
              $ref: "#/definitions/DropDownValue"
          encryption:
            type: object
            description: (optional) If field requires encryption
            properties:
              type:
                type: string
                description: for instance.. text/javascript
              src:
                type: string
                description: url source of encryption
              function:
                type: string
                description: function name
          validators:
            type: array
            items:
              $ref: "#/definitions/Validator"
      
  DataType:
            type: string
            description: The JSON data type expected by the system.
            enum:
              - string
              - number
              - boolean
              - array
              - object

  Error:
    type: object
    properties:
      code:
        type: string
      messsage:
        type: string
  
  DropDownValue:
    type: object
    required:
      - value
    properties:
      order:
        type: integer
        description: The suggested order of the item
      value:
        type: string
        description: The value of the dropdown value. This is not the value (usually) to display on the UI, rather
          it is the "slug" used for the value, what should be retured to the system. Always is returned as string
          so check the isNumber value to see if you should cast to number.
      isNumber:
        type: boolean
        description: Since we always return DD values as strings, use this to cast the values to number if required.
  
  Validator:
    description: |
      A validator definition. Each validator has a name, and a key which identifies the validator. The name and
      key should be descriptive of that the validator is doing.
    
    type: object
    required:
      - key
      - invalid_message
    properties:
      key:
        type: string
        description: Twelve charactar (UPPER CASE), unique short code idenfifying the validator
        minLength: 12
        maxLength : 12
      invalid_message:
        description: The slug that will be returned upon invalidation. 
        type: string
        minLength: 5
        maxLength: 15
      warning:
        type: boolean
        description: Violations are only warnings
      name:
        type: string
        description: Full name of the validator
      parameters:
        description: Key value pair of parameters for the validator
        type: object
      description: 
        type: string
        description: A developers description of what the validator validates, not for use on the UI.
  
  Info:
    description: Response information, anything that is not response data itself.
    type: object
    required:
      - success
      - resultCode
    properties:
      success:
        type: boolean
        default: true
      resultCode:
        type: string
      message:
        type: string
      responseTime:
        type: number
        format: float
        
  PagedInfo:
    description: Response information, anything that is not response data itself.
    type: object
    required:
      - success
      - resultCode
    properties:
      success:
        type: boolean
        default: true
      resultCode:
        type: string
      message:
        type: string
      responseTime:
        type: number
        format: float
      pageNum: 
        description: The current page number, 0 if no pages
        type: integer
      pages:
        description: The total number of pages, 0 if not paged.
        type: integer
      pageSize:
        description: The size of each page, 0 if no paging.
        type: integer

  paymentMethod:
    description : Information regarding an available payment method.
    type: object
    properties:
      name:
        type: string
      code:
        type: string
        description: Code representing the payment method type, to allow for consumer translations.
      processor:
        type: string
        description: payment processor used for this method (paymentiq,...)
      category:
        type: string
        description: A category of payment
        enum:
          - bank_transfers
          - credit_cards
          - debit_cards
          - instant_banking
          - e_wallets
          - prepaid_cards
          - money_orders
          - bitcoins
          - mobile_banks
          - other
      text:
        type: string
        description: Payment Text
      timeStr:
        type: string
        description: String decription of the transacction time
      isInstant:
        type: boolean
        default: false
        description: is the transaction instantly credited/debited to the account
      fee:
        type: string
        description: Text decription of the fee.
      limits:
        description: Information about limits for the payment method, as text.
        type: object
        properties:
          minAmountStr:
            type: string
          maxAmountStr:
            type: string
          minAmountVal:
            type: number
          maxAmountVal:
            type: number
      image:
        type: string
        description: URL to full size image for this payment provider. 
      form:
        type: object
        description: Information about fields for payment method
        properties: 
          fields:
            type: array
            description: list off all fields to be posted
            items:
              $ref: "#/definitions/FieldDef"  
  
  GameTransaction:
    description: Transaction
    type: object
    properties:
      id:
        type: string
      time_stamp:
        type: string
      details:
        type: string
      credit:
        type: string
      debit:
        type: string
      balance:
        type: string
      transid:
        type: string
      transby:
        type: string
      agentuser:
        type: string
      method:
        type: string
      system:
        type: string
      accountuser:
        type: string

  TransMessage:
    description: Transaction message
    type: object
    properties:
      label:
        type: string
        description: Description
      value:
        type: string
        description: Value
      key:
        type: string
        description: Optional
  
  Bonus:
    description: Bonus information
    type: object
    properties:
      bonus_id:
        description: bonus id
        type: string
      name:
        description: Bonus name
        type: string
      frontend_slug:
        description: Slug for bonus in CMS
        type: string
      valid_until:
        description: Bonus valid until date
        type: string
      valid_from:
        description: Bonus valid from date
        type: string
      deposit_min:
        description: Minimal deposit to achieve bonus
        type: number
      deposit_max:
        description: Maximum deposit to achieve bonus
        type: number
      payment_methods:
        description: Payment methods for which this bonus is applicable
        type: array
        items:
          type: string
      activated_for_player:
        description: Is this bonus already activated for this player
        type: boolean
      is_automatic:
        description: mark a automatic bonus. player gets this bonus automatically on actions ( like first deposit )
        type: boolean
      is_bonus_program:
        description: bonus that is a bonus program. when activated, player is entering a freeround bonus program
        type: boolean

  Program:
    description: A program definition with current status from a player perspective
    type: object
    properties:
      state:
        type: string
        enum:
          - active
          - inactive
      slug:
        type: string
        description: UNIQUE name of the program
      playerId:
        type: string
      awards:
        type: array
        description: list of all awards
        items:
          $ref: "#/definitions/ProgramAward"  

  ProgramAward:
    description: An award inside a program. 1 program can have more that 1 award
    type: object
    properties:
      slug:
        type: string
        description: Unique name of award inside freeround program, e.g. `registration`, `firstDeposit` etc.
      type:
        type: string
        enum:
          - locked
          - unlocked
          - active
          - completed
      rounds:
        type: integer
        description: count of overall freerounds on the award scope
      games:
        type: array
        description: array of game ids
        items:
          type: string
      instances:
        type: array
        description: list of all allocated freerounds, called 'instances'
        items:
          $ref: "#/definitions/ProgramAwardInstance" 

  ProgramAwardInstance:
    description: An instance, freeround that was alocated on a game with given count of freerounds
    type: object
    properties:
      game:
        type: string
        description: a game id
      rounds:
        type: integer
        description: Number of freerounds assigned to this game
      completed:
        type: boolean
        description: Tells if freerounds have been completed for this game



responses:
  InvalidPlayerdata:
    description: Information returned when player data posted is invalidated by the schema.
    schema:
          type: object
          properties:
            info:
              $ref: "#/definitions/Info"
            data:
              type: object
              properties:
                record:
                  description: Additional information about record level invalidation.
                  type: array
                  items:
                    $ref: "#/definitions/Error"
            
                fields:
                  description: an array of invalid fields, with an array of the invalid validators.
                  type: array
                  items:
                      $ref: "#/definitions/InvalidField"

  InvalidPaymentdata:
    description: Information returned when payment fails
    schema:
          type: object
          properties:
            info:
              $ref: "#/definitions/Info"
            data:
              type: object
              properties:
                record:
                  description: Additional information about record level invalidation.
                  type: array
                  items:
                    $ref: "#/definitions/Error"
            
                fields:
                  description: an array of invalid fields, with an array of the invalid validators.
                  type: array
                  items:
                      $ref: "#/definitions/InvalidField"
  
  Error:
    description: Error Information
    schema:
      $ref: "#/definitions/Info"

  AuthError:
    description: Authorization error, resource not available for this session or apiKey
    schema:
      $ref: "#/definitions/Info"
      
  Info:
    description: Basic information
    schema:
        type: object
        required:
          - success
          - resultCode
        properties:
          success:
            type: boolean
            default: true
          resultCode:
            type: string
          message:
            type: string
          responseTime:
            type: number
            format: float
            
parameters:
  Session:
    name: x-igp-session
    in: header
    description: IGP session key
    required: true
    type: string
  AnonSession:
    name: x-igp-session
    in: header
    description: Anon. IGP session key
    required: true
    type: string
  SchemaCode:
    name: SchemaCode
    in: path
    description: A session Code
    required: true
    type: string
  ApiKey:
    name: api-key
    in: header
    description: |
      Api key required to access or modify a resource.
      Can also be used as _x-api-key_
    required: true
    type: string
